name: lens
version: 3.7.1.2
id: lens-3.7.1.2-d1383c9a2e04bba863c28df844a5b429
license: BSD3
copyright: Copyright (C) 2012 Edward A. Kmett
maintainer: Edward A. Kmett <ekmett@gmail.com>
stability: provisional
homepage: http://github.com/ekmett/lens/
package-url:
synopsis: Lenses, Folds and Traversals
description: This package comes \"Batteries Included\" with many useful lenses for the types
             commonly used from the Haskell Platform, and with tools for automatically
             generating lenses and isomorphisms for user-supplied data types.
             .
             The combinators in @Control.Lens@ provide a highly generic toolbox for composing
             families of getters, folds, isomorphisms, traversals, setters and lenses and their
             indexed variants.
             .
             An overview, with a large number of examples can be found in the README.
             .
             <https://github.com/ekmett/lens#lens-lenses-folds-and-traversals>
             .
             More information on the care and feeding of lenses, including a brief tutorial and motivation
             for their types can be found on the lens wiki.
             .
             <https://github.com/ekmett/lens/wiki>
             .
             A small game that manages its state using lenses can be found in the example folder.
             .
             <https://github.com/ekmett/lens/blob/master/examples/Pong.hs>
             .
             /Lenses, Folds and Traversals/
             .
             The core of this hierarchy looks like:
             .
             <<http://i.imgur.com/FgfVW.png>>
             .
             You can compose any two elements of the hierarchy above using (.) from the Prelude, and you can
             use any element of the hierarchy as any type it linked to above it.
             .
             The result is their lowest upper bound in the hierarchy (or an error if that bound doesn't exist).
             .
             For instance:
             .
             * You can use any 'Traversal' as a 'Fold' or as a 'Setter'.
             .
             * The composition of a 'Traversal' and a 'Getter' yields a 'Fold'.
             .
             /Minimizing Dependencies/
             .
             If you want to provide lenses and traversals for your own types in your own libraries, then you
             can do so without incurring a dependency on this (or any other) lens package at all.
             .
             /e.g./ for a data type:
             .
             > data Foo a = Foo Int Int a
             .
             You can define lenses such as
             .
             > -- bar :: Simple Lens (Foo a) Int
             > bar :: Functor f => (Int -> f Int) -> Foo a -> f (Foo a)
             > bar f (Foo a b c) = fmap (\a' -> Foo a' b c) (f a)
             .
             > -- baz :: Lens (Foo a) (Foo b) a b
             > quux :: Functor f => (a -> f b) -> Foo a -> f (Foo b)
             > quux f (Foo a b c) = fmap (Foo a b) (f c)
             .
             without the need to use any type that isn't already defined in the @Prelude@.
             .
             And you can define a traversal of multiple fields with 'Control.Applicative.Applicative':
             .
             > -- traverseBarAndBaz :: Simple Traversal (Foo a) Int
             > traverseBarAndBaz :: Applicative f => (Int -> f Int) -> Foo a -> f (Foo a)
             > traverseBarAndBaz f (Foo a b c) = Foo <$> f a <*> f b <*> pure c
             .
             What is provided in this library is a number of stock lenses and traversals for
             common haskell types, a wide array of combinators for working them, and more
             exotic functionality, (/e.g./ getters, setters, indexed folds, isomorphisms).
category: Data, Lenses
author: Edward A. Kmett
exposed: True
exposed-modules: Control.Lens.TH Language.Haskell.TH.Lens
                 Control.Exception.Lens Control.Lens Control.Lens.Action
                 Control.Lens.Classes Control.Lens.Combinators Control.Lens.Each
                 Control.Lens.Fold Control.Lens.Getter Control.Lens.Indexed
                 Control.Lens.IndexedGetter Control.Lens.IndexedFold
                 Control.Lens.IndexedLens Control.Lens.IndexedSetter
                 Control.Lens.IndexedTraversal Control.Lens.Internal
                 Control.Lens.Internal.Zipper Control.Lens.Iso Control.Lens.Loupe
                 Control.Lens.Plated Control.Lens.Prism Control.Lens.Representable
                 Control.Lens.Setter Control.Lens.Simple Control.Lens.Traversal
                 Control.Lens.Tuple Control.Lens.Type Control.Lens.WithIndex
                 Control.Lens.Wrapped Control.Lens.Zipper Control.Lens.Zoom
                 Data.Bits.Lens Data.ByteString.Lens Data.ByteString.Strict.Lens
                 Data.ByteString.Lazy.Lens Data.Complex.Lens Data.Data.Lens
                 Data.Dynamic.Lens Data.HashSet.Lens Data.IntSet.Lens Data.List.Lens
                 Data.List.Split.Lens Data.Sequence.Lens Data.Set.Lens
                 Data.Text.Lens Data.Text.Strict.Lens Data.Text.Lazy.Lens
                 Data.Tree.Lens Data.Typeable.Lens Data.Vector.Lens
                 Data.Vector.Generic.Lens GHC.Generics.Lens Data.Array.Lens
                 System.FilePath.Lens Control.Parallel.Strategies.Lens
                 Control.Seq.Lens
hidden-modules: Control.Lens.Internal.Combinators
trusted: False
import-dirs: /Users/otters/.dev/Haskell/unscramble/cabal-dev//lib/lens-3.7.1.2/ghc-7.4.2
library-dirs: /Users/otters/.dev/Haskell/unscramble/cabal-dev//lib/lens-3.7.1.2/ghc-7.4.2
hs-libraries: HSlens-3.7.1.2
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: array-0.4.0.0-0b6c5ca7e879a14d110ca4c001dd9297
         base-4.5.1.0-47f48c3ae7f8256a66a23e9dfe22eefc
         bytestring-0.9.2.1-0044644a71adfe5e950e6c6f6ca13065
         comonad-3.0.0.2-ee00dd50d62cd91b57510d2e5b7e25f8
         comonad-transformers-3.0-dd9071dc199d1419e67a65a14355a85e
         comonads-fd-3.0-47831a66b3868814fbcd5179606408a9
         containers-0.4.2.1-75f143aa39a3e77a1ce2300025bdd8ce
         filepath-1.3.0.0-f998e5510c76a98913f57b14b4f16c57
         ghc-prim-0.2.0.0-7d3c2c69a5e8257a04b2c679c40e2fa7
         hashable-1.2.0.2-1be11ce1cf7f9f800c7b7da9c7779ddf
         mtl-2.1.2-02e701f9b1590ee88a0b5b0bd5d93a29
         parallel-3.2.0.3-4cdd6067624f867b253b98d6d9fb9f52
         semigroups-0.8.5-9a4beb9c06c12c7a95b5995db5a4528b
         split-0.2.1.1-03ec5738edb34f2e8967d25637b9392f
         template-haskell-2.7.0.0-e109822dcbed82c43f9fa60194eb64b5
         text-0.11.2.3-473d9a1761b27c7315f2ef4569d93c3c
         transformers-0.3.0.0-8e66ecc7d4dae2b07b2b5406908c70e4
         unordered-containers-0.2.3.0-458bee24ad862c447b795be4b121e39f
         vector-0.10.0.1-3450daae3d9f2092020075d05481123c
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /Users/otters/.dev/Haskell/unscramble/cabal-dev//share/doc/lens-3.7.1.2/html/lens.haddock
haddock-html: /Users/otters/.dev/Haskell/unscramble/cabal-dev//share/doc/lens-3.7.1.2/html
